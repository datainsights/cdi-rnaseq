[["index.html", "🧬 RNA-Seq Data Science in R ", " 🧬 RNA-Seq Data Science in R Last updated: June 29, 2025 "],["welcome-to-the-rna-seq-qa-guide.html", "🌱 Welcome to the RNA-Seq Q&amp;A Guide 🌐 The CDI Learning Path", " 🌱 Welcome to the RNA-Seq Q&amp;A Guide This guide is your hands-on companion for learning and applying RNA sequencing (RNA-Seq) data analysis — one question at a time. You’ll explore each step of the RNA-Seq pipeline using real tools, reproducible workflows, and well-commented code. From quality control and quantification to differential expression and biological interpretation, this guide shows how scripting, statistics, and bioinformatics come together in practice. Whether you’re a student, researcher, or self-taught enthusiast, you’ll gain confidence using Python, R, shell scripting, and reproducible workflows — including tools like DESeq2, Salmon, edgeR, FastQC, Snakemake, and more. Each Q&amp;A includes a clear explanation, relevant code in both Python and R when applicable, and builds toward real-world problem solving. You’re not just learning RNA-Seq — you’re learning to think like a modern data-driven bioinformatician. 🌐 The CDI Learning Path This guide is part of the Complex Data Insights (CDI) learning system — a fully free and open-source project licensed under the MIT License. CDI breaks down complex topics into four progressive layers, designed to be explored individually or as an integrated journey: 🔍 EDA (Exploratory Data Analysis) Understand your data — explore its structure, patterns, and quirks. 📊 VIZ (Visualization) Communicate findings through clear and compelling visuals. 📐 STATS (Statistical Analysis) Test hypotheses and quantify uncertainty using sound statistical methods. 🤖 ML (Machine Learning) Build models to predict, classify, and uncover deeper insights. CDI helps you grow — one Q&amp;A at a time. "],["what-kind-of-data-will-you-be-using-in-this-guide.html", "📂 What kind of data will you be using in this guide?", " 📂 What kind of data will you be using in this guide? This guide uses realistic synthetic RNA-Seq data that mimics biological experiments with two conditions (e.g., Positive vs. Negative). The dataset includes: 🧬 A gene expression count matrix with 1000 genes and 14 samples 📑 A sample metadata file defining experimental groups 📈 Precomputed differential expression results using DESeq2 The synthetic design allows full control over expression patterns while producing biologically meaningful visualizations like PCA, volcano plots, MA plots, and heatmaps. It’s perfect for reproducible learning — no downloads or cloud access required. ✅ Once you’ve mastered the methods here, you’ll be ready to plug in your own raw or processed RNA-Seq data and apply the same analysis flow confidently. "],["how-do-you-create-a-project-data-folder-for-storing-rna-seq-inputs-and-outputs.html", "Q&A 1 How do you create a project data folder for storing RNA-Seq inputs and outputs? 1.1 Explanation 1.2 R Code", " Q&A 1 How do you create a project data folder for storing RNA-Seq inputs and outputs? 1.1 Explanation A well-organized project structure improves reproducibility and clarity in RNA-Seq workflows. We’ll begin by creating a data/ directory where all input files (counts, metadata) and output files (DE results, visualizations) will be stored. This setup mimics a real-world analysis structure and helps you track your data as you progress through the Q&amp;A guide. 1.2 R Code # 📁 Create the data folder if it doesn&#39;t exist if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;, showWarnings = FALSE) message(&quot;✅ data/ folder created.&quot;) ✅ Takeaway: Always start your RNA-Seq project by creating a consistent directory structure. A data/ folder keeps inputs and outputs organized throughout your analysis. "],["how-do-you-generate-synthetic-rna-seq-counts-and-metadata-using-r.html", "Q&A 2 How do you generate synthetic RNA-Seq counts and metadata using R? 2.1 Explanation 2.2 R Code", " Q&A 2 How do you generate synthetic RNA-Seq counts and metadata using R? 2.1 Explanation In this step, we generate synthetic RNA-Seq data with known differences between conditions. This allows you to simulate differential expression, save the data into a data/ folder, and later analyze it using DESeq2. We simulate: 1000 genes 14 samples (11 Positive, 3 Negative) Upregulation in the top 30 genes for Negative samples Downregulation in the next 30 genes for Negative samples 🔧 This setup mimics a real-world study design and ensures that the resulting volcano and MA plots clearly show the V-shape pattern of differential expression. 2.2 R Code library(tidyverse) set.seed(42) # 📦 Create output directory if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;, recursive = TRUE) # 🧬 Simulation settings n_genes &lt;- 1000 n_pos &lt;- 11 n_neg &lt;- 3 n_de_up &lt;- 30 n_de_down &lt;- 30 gene_ids &lt;- paste0(&quot;Gene&quot;, seq_len(n_genes)) # Simulate Positive group (baseline expression) counts_pos &lt;- matrix(rnbinom(n_genes * n_pos, mu = 100, size = 1), nrow = n_genes) # Simulate Negative group counts_neg &lt;- matrix(rnbinom(n_genes * n_neg, mu = 100, size = 1), nrow = n_genes) # ⬆️ Upregulate top 30 genes in Negative samples counts_neg[1:n_de_up, ] &lt;- counts_neg[1:n_de_up, ] + rnbinom(n_de_up * n_neg, mu = 400, size = 1) # ⬇️ Downregulate next 30 genes in Negative samples counts_neg[(n_de_up + 1):(n_de_up + n_de_down), ] &lt;- rnbinom(n_de_down * n_neg, mu = 10, size = 1) # Combine counts count_matrix &lt;- cbind(counts_pos, counts_neg) colnames(count_matrix) &lt;- paste0(&quot;Sample&quot;, seq_len(n_pos + n_neg)) rownames(count_matrix) &lt;- gene_ids # 📄 Metadata metadata &lt;- tibble( Sample = colnames(count_matrix), condition = c(rep(&quot;Positive&quot;, n_pos), rep(&quot;Negative&quot;, n_neg)) ) # 💾 Save to data/ write_csv(as.data.frame(count_matrix) |&gt; rownames_to_column(&quot;gene&quot;), &quot;data/demo_counts.csv&quot;) write_csv(metadata, &quot;data/demo_metadata.csv&quot;) # 👁️ Preview first 5 genes × 5 samples as.data.frame(count_matrix)[1:5, 1:5] Sample1 Sample2 Sample3 Sample4 Sample5 Gene1 186 175 175 54 54 Gene2 45 101 54 48 287 Gene3 38 12 214 92 86 Gene4 293 0 172 35 85 Gene5 215 377 72 18 3 # 👁️ Preview metadata head(metadata, 5) # A tibble: 5 × 2 Sample condition &lt;chr&gt; &lt;chr&gt; 1 Sample1 Positive 2 Sample2 Positive 3 Sample3 Positive 4 Sample4 Positive 5 Sample5 Positive ✅ Takeaway: This simulation creates a realistic expression pattern where some genes are clearly upregulated or downregulated in one condition. This structure is ideal for learning DE analysis, producing excellent MA and volcano plots, and testing downstream workflows. "],["how-do-you-validate-rna-seq-input-data-before-analysis-using-r.html", "Q&A 3 How do you validate RNA-Seq input data before analysis using R? 3.1 Explanation 3.2 R Code", " Q&A 3 How do you validate RNA-Seq input data before analysis using R? 3.1 Explanation Before proceeding with differential expression analysis, it’s essential to confirm that your input files are loaded correctly and match in structure. This includes: ✅ Ensuring all samples in the metadata are present in the count matrix ✅ Verifying that the matrix is numeric and genes are in rows ✅ Checking for NA or non-finite values This validation step prevents downstream errors and ensures a smooth analysis. 3.2 R Code library(tidyverse) # 🔄 Load the count matrix and metadata count_df &lt;- read_csv(&quot;data/demo_counts.csv&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🧪 Inspect the data glimpse(count_df) Rows: 1,000 Columns: 15 $ gene &lt;chr&gt; &quot;Gene1&quot;, &quot;Gene2&quot;, &quot;Gene3&quot;, &quot;Gene4&quot;, &quot;Gene5&quot;, &quot;Gene6&quot;, &quot;Gene7&quot;… $ Sample1 &lt;dbl&gt; 186, 45, 38, 293, 215, 246, 99, 8, 38, 197, 28, 98, 93, 142, … $ Sample2 &lt;dbl&gt; 175, 101, 12, 0, 377, 376, 115, 13, 66, 82, 89, 14, 38, 114, … $ Sample3 &lt;dbl&gt; 175, 54, 214, 172, 72, 34, 74, 13, 88, 49, 223, 237, 315, 145… $ Sample4 &lt;dbl&gt; 54, 48, 92, 35, 18, 53, 18, 118, 200, 146, 169, 38, 93, 64, 1… $ Sample5 &lt;dbl&gt; 54, 287, 86, 85, 3, 81, 369, 96, 1, 12, 101, 41, 135, 102, 82… $ Sample6 &lt;dbl&gt; 67, 74, 110, 173, 27, 180, 82, 22, 146, 8, 148, 70, 0, 432, 1… $ Sample7 &lt;dbl&gt; 50, 42, 149, 50, 12, 46, 22, 192, 39, 55, 15, 47, 78, 53, 3, … $ Sample8 &lt;dbl&gt; 3, 54, 6, 142, 50, 312, 289, 264, 82, 244, 48, 208, 77, 167, … $ Sample9 &lt;dbl&gt; 37, 118, 124, 32, 68, 480, 72, 94, 96, 156, 54, 46, 196, 30, … $ Sample10 &lt;dbl&gt; 24, 28, 11, 198, 284, 86, 41, 21, 93, 51, 96, 175, 56, 229, 2… $ Sample11 &lt;dbl&gt; 38, 42, 121, 138, 0, 46, 43, 66, 266, 14, 18, 96, 56, 9, 166,… $ Sample12 &lt;dbl&gt; 361, 437, 388, 173, 590, 221, 334, 108, 583, 193, 428, 826, 3… $ Sample13 &lt;dbl&gt; 238, 314, 324, 984, 1208, 287, 350, 438, 170, 346, 857, 986, … $ Sample14 &lt;dbl&gt; 266, 586, 589, 889, 650, 189, 659, 190, 650, 172, 106, 434, 1… glimpse(metadata) Rows: 14 Columns: 2 $ Sample &lt;chr&gt; &quot;Sample1&quot;, &quot;Sample2&quot;, &quot;Sample3&quot;, &quot;Sample4&quot;, &quot;Sample5&quot;, &quot;Samp… $ condition &lt;chr&gt; &quot;Positive&quot;, &quot;Positive&quot;, &quot;Positive&quot;, &quot;Positive&quot;, &quot;Positive&quot;, … # Check that all sample names in metadata are in counts all(metadata$Sample %in% colnames(count_df)) # Should return TRUE [1] TRUE # Set gene names as rownames and confirm dimensions counts &lt;- count_df |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() stopifnot(all(metadata$Sample %in% colnames(counts))) stopifnot(ncol(counts) == nrow(metadata)) ✅ Takeaway: A quick check of structure, dimension, and sample consistency ensures your data is clean and ready for analysis. This step can help catch common mistakes early, such as misaligned sample names or non-numeric entries. "],["how-do-you-perform-differential-gene-expression-analysis-using-deseq2-in-r.html", "Q&A 4 How do you perform differential gene expression analysis using DESeq2 in R? 4.1 Explanation 4.2 R Code", " Q&A 4 How do you perform differential gene expression analysis using DESeq2 in R? 4.1 Explanation With a validated count matrix and metadata, we can now run DESeq2 to identify differentially expressed genes between two conditions. DESeq2 performs: 📊 Size factor estimation (normalization) 🔁 Dispersion estimation ⚙️ Negative binomial model fitting 🧪 Wald test for significance 📉 Adjusted p-values via FDR This produces a results table with log2 fold changes, p-values, and adjusted p-values. 4.2 R Code library(tidyverse) library(DESeq2) set.seed(42) # For reproducibility # 🔄 Load data count_df &lt;- read_csv(&quot;data/demo_counts.csv&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🧬 Prepare DESeq2 inputs counts &lt;- count_df |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() dds &lt;- DESeqDataSetFromMatrix( countData = counts, colData = metadata, design = ~ condition ) # ⚙️ Run differential expression analysis dds &lt;- DESeq(dds) # 📋 Extract results and clean res_df &lt;- as.data.frame(results(dds)) |&gt; rownames_to_column(&quot;gene&quot;) |&gt; drop_na(log2FoldChange, padj) |&gt; arrange(padj) # 💾 Save for downstream steps if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;, recursive = TRUE) write_csv(res_df, &quot;data/deseq2_results.csv&quot;) ✅ Takeaway: DESeq2 provides a robust statistical framework to identify significantly regulated genes. Once saved, these results can be used for downstream visualizations like volcano plots and MA plots. "],["how-do-you-create-a-volcano-plot-from-deseq2-results-using-r.html", "Q&A 5 How do you create a volcano plot from DESeq2 results using R? 5.1 Explanation 5.2 R Code", " Q&A 5 How do you create a volcano plot from DESeq2 results using R? 5.1 Explanation A volcano plot combines statistical significance with effect size to highlight genes of interest: X-axis: log2 fold change (magnitude of differential expression) Y-axis: -log10 adjusted p-value (statistical significance) It’s ideal for identifying genes that are both strongly regulated and highly significant. DESeq2 results already contain log2FoldChange and padj columns, making this visualization straightforward. 5.2 R Code library(tidyverse) # 📄 Load DESeq2 results res_df &lt;- read_csv(&quot;data/deseq2_results.csv&quot;) |&gt; drop_na(log2FoldChange, padj) |&gt; mutate(significant = padj &lt; 0.05 &amp; abs(log2FoldChange) &gt; 1) # 📊 Volcano plot ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significant)) + geom_point(alpha = 0.6, size = 2) + scale_color_manual(values = c(&quot;FALSE&quot; = &quot;gray&quot;, &quot;TRUE&quot; = &quot;red&quot;)) + geom_vline(xintercept = c(-1, 1), linetype = &quot;dashed&quot;) + geom_hline(yintercept = -log10(0.05), linetype = &quot;dashed&quot;) + labs(title = &quot;Volcano Plot of Differential Expression&quot;, x = &quot;Log2 Fold Change&quot;, y = &quot;-Log10 Adjusted P-Value&quot;) + theme_minimal() ✅ Takeaway: Volcano plots help you visually prioritize genes for downstream validation by showing both statistical significance and magnitude of change. "],["how-do-you-create-an-ma-plot-from-deseq2-results-using-r.html", "Q&A 6 How do you create an MA plot from DESeq2 results using R? 6.1 Explanation 6.2 R Code", " Q&A 6 How do you create an MA plot from DESeq2 results using R? 6.1 Explanation An MA plot shows the relationship between: M (log ratio) = log2 fold change (Y-axis) A (mean average) = average expression (X-axis), often baseMean It helps you visualize: Genes with large fold changes Genes with low expression and unstable variance Potential systematic bias in your differential expression results MA plots are especially useful after running DESeq2, as the result object includes baseMean and log2FoldChange. 6.2 R Code library(tidyverse) # 📄 Load DESeq2 results res_df &lt;- read_csv(&quot;data/deseq2_results.csv&quot;) |&gt; drop_na(log2FoldChange, padj, baseMean) # 📊 MA plot ggplot(res_df, aes(x = log10(baseMean + 1), y = log2FoldChange)) + geom_point(alpha = 0.6, color = &quot;steelblue&quot;, size = 2) + geom_hline(yintercept = c(-1, 1), linetype = &quot;dashed&quot;, color = &quot;darkgray&quot;) + labs(title = &quot;MA Plot of Differential Expression&quot;, x = &quot;Log10 Mean Expression (baseMean + 1)&quot;, y = &quot;Log2 Fold Change&quot;) + theme_minimal() ✅ Takeaway: MA plots offer a quick summary of how expression changes relate to average gene abundance, helping detect outliers and trends in your DE analysis. "],["how-do-you-log-transform-rna-seq-counts-for-pca-or-clustering-using-r.html", "Q&A 7 How do you log-transform RNA-Seq counts for PCA or clustering using R? 7.1 Explanation 7.2 R Code", " Q&A 7 How do you log-transform RNA-Seq counts for PCA or clustering using R? 7.1 Explanation Raw RNA-Seq counts are: Not normally distributed Heteroscedastic (variance increases with mean) Influenced by a few highly expressed genes These properties make them unsuitable for PCA, clustering, or heatmaps without transformation. To correct this, we apply a log transformation to stabilize variance: log2(count + 1) — simple and fast rlog() — regularized log transformation (DESeq2), ideal for small sample sizes vst() — variance-stabilizing transformation, faster for large datasets We save the rlog matrix so it can be reused by downstream visualizations. 7.2 R Code library(tidyverse) library(DESeq2) # 📊 Load count data and metadata counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 📦 Create DESeq2 object dds &lt;- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~ condition) # 🔄 Transform rlog_dds &lt;- rlog(dds) # 🧬 Extract transformed matrix rlog_mat &lt;- assay(rlog_dds) |&gt; as.data.frame() |&gt; rownames_to_column(&quot;gene&quot;) # 💾 Save for reuse write_csv(rlog_mat, &quot;data/rlog_matrix.csv&quot;) ✅ Takeaway: Log transformations—especially rlog()—stabilize variance and prepare RNA-Seq data for PCA, clustering, and heatmaps. Saving the transformed matrix improves reproducibility. "],["how-do-you-create-a-heatmap-of-top-differentially-expressed-genes-using-r.html", "Q&A 8 How do you create a heatmap of top differentially expressed genes using R? 8.1 Explanation 8.2 R Code", " Q&A 8 How do you create a heatmap of top differentially expressed genes using R? 8.1 Explanation A heatmap allows you to visualize the expression patterns of the most differentially expressed genes across all samples. It is especially helpful for: Revealing sample clustering and gene expression trends Highlighting contrasts between conditions Identifying outlier samples or expression signatures We typically use rlog-transformed data to ensure that variance is stabilized, making expression patterns more interpretable. 8.2 R Code library(tidyverse) library(pheatmap) # 🔹 Load transformed expression matrix rlog_mat &lt;- read_csv(&quot;data/rlog_matrix.csv&quot;) |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() # 🔹 Load DESeq2 results and select top 30 DE genes res_df &lt;- read_csv(&quot;data/deseq2_results.csv&quot;) |&gt; drop_na(padj) |&gt; arrange(padj) top_genes &lt;- res_df$gene[1:30] top_mat &lt;- rlog_mat[top_genes, ] # 📊 Plot heatmap pheatmap(top_mat, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, fontsize_row = 6, scale = &quot;row&quot;, main = &quot;Heatmap of Top 30 Differentially Expressed Genes&quot;) ✅ Takeaway: Heatmaps are powerful tools to explore gene expression dynamics across conditions. Always use a variance-stabilized matrix and select top DE genes for clarity. "],["how-do-you-visualize-rna-seq-samples-using-pca-in-r.html", "Q&A 9 How do you visualize RNA-Seq samples using PCA in R? 9.1 Explanation 9.2 R Code", " Q&A 9 How do you visualize RNA-Seq samples using PCA in R? 9.1 Explanation Principal Component Analysis (PCA) reduces the dimensionality of high-throughput data like RNA-Seq by finding the principal directions of variation. PCA is useful for: Detecting sample outliers Checking for batch effects Visualizing group separation We apply PCA on the rlog-transformed data (rlog_matrix.csv) to ensure homoscedasticity and interpretability. 9.2 R Code library(tidyverse) # 📥 Load rlog-transformed matrix rlog_mat &lt;- read_csv(&quot;data/rlog_matrix.csv&quot;) # 🧪 Prepare PCA input pca_input &lt;- rlog_mat |&gt; column_to_rownames(&quot;gene&quot;) |&gt; t() |&gt; as.data.frame() # 📊 Run PCA pca_res &lt;- prcomp(pca_input, center = TRUE, scale. = TRUE) pca_df &lt;- as_tibble(pca_res$x) |&gt; mutate(Sample = rownames(pca_input)) # 🔗 Join with metadata metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) plot_df &lt;- left_join(pca_df, metadata, by = &quot;Sample&quot;) # 🎨 Plot ggplot(plot_df, aes(x = PC1, y = PC2, color = condition)) + geom_point(size = 3, alpha = 0.8) + labs(title = &quot;PCA of RNA-Seq Samples&quot;, x = paste0(&quot;PC1 (&quot;, round(summary(pca_res)$importance[2, 1] * 100, 1), &quot;%)&quot;), y = paste0(&quot;PC2 (&quot;, round(summary(pca_res)$importance[2, 2] * 100, 1), &quot;%)&quot;)) + theme_minimal() ✅ Takeaway: PCA on log-transformed RNA-Seq data helps visualize sample similarities, spot outliers, and confirm that experimental conditions drive the major sources of variation. "],["how-do-you-visualize-the-expression-of-a-single-gene-across-conditions-using-r.html", "Q&A 10 How do you visualize the expression of a single gene across conditions using R? 10.1 Explanation 10.2 R Code", " Q&A 10 How do you visualize the expression of a single gene across conditions using R? 10.1 Explanation To explore how a specific gene behaves across experimental conditions, a boxplot of rlog-transformed expression values can provide insight into group differences and variability. This is useful for: Validating top hits from DE results Highlighting genes of interest Creating publication-ready visual summaries We’ll visualize Gene5 as an example. 10.2 R Code library(tidyverse) # 📥 Load rlog-transformed expression matrix # 📥 Load rlog-transformed expression matrix rlog_mat &lt;- read_csv(&quot;data/rlog_matrix.csv&quot;) |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() # 📥 Load metadata metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🎯 Select one gene gene_to_plot &lt;- &quot;Gene5&quot; # 🧪 Check gene exists if (!gene_to_plot %in% rownames(rlog_mat)) stop(&quot;Gene not found in rlog matrix.&quot;) # 🧾 Create dataframe for plotting plot_df &lt;- tibble( Expression = rlog_mat[gene_to_plot, ], Sample = colnames(rlog_mat) ) |&gt; left_join(metadata, by = &quot;Sample&quot;) # 📊 Boxplot ggplot(plot_df, aes(x = condition, y = Expression, fill = condition)) + geom_boxplot(width = 0.5, alpha = 0.7, outlier.shape = NA) + geom_jitter(width = 0.1, size = 2, alpha = 0.7) + labs(title = paste(&quot;Expression of&quot;, gene_to_plot), x = &quot;Condition&quot;, y = &quot;Rlog Expression&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;) ✅ Takeaway: Boxplots of individual genes help confirm biological patterns and support gene selection for follow-up experiments or reporting. "],["how-do-you-visualize-the-expression-of-two-or-more-genes-across-conditions-using-r.html", "Q&A 11 How do you visualize the expression of two or more genes across conditions using R? 11.1 Explanation 11.2 R Code", " Q&A 11 How do you visualize the expression of two or more genes across conditions using R? 11.1 Explanation Sometimes, you want to inspect the expression patterns of specific genes of interest — such as those that appear highly upregulated or downregulated in your DESeq2 results. By selecting two or more genes and reshaping the rlog-transformed matrix into a tidy long format, you can easily create grouped boxplots, violin plots, or faceted charts. These plots help validate patterns visually and are useful for presentations or downstream interpretation. 11.2 R Code library(tidyverse) # 📥 Load transformed matrix and metadata rlog_mat &lt;- read_csv(&quot;data/rlog_matrix.csv&quot;) |&gt; column_to_rownames(&quot;gene&quot;) |&gt; as.matrix() metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🎯 Select two genes genes_to_plot &lt;- c(&quot;Gene5&quot;, &quot;Gene12&quot;) # ✅ Check genes exist missing_genes &lt;- setdiff(genes_to_plot, rownames(rlog_mat)) if (length(missing_genes) &gt; 0) stop(paste(&quot;Missing genes:&quot;, paste(missing_genes, collapse = &quot;, &quot;))) # 🧾 Create tidy dataframe for ggplot plot_df &lt;- rlog_mat[genes_to_plot, ] |&gt; as.data.frame() |&gt; rownames_to_column(&quot;gene&quot;) |&gt; pivot_longer(-gene, names_to = &quot;Sample&quot;, values_to = &quot;Expression&quot;) |&gt; left_join(metadata, by = &quot;Sample&quot;) # 📊 Boxplot with multiple genes ggplot(plot_df, aes(x = condition, y = Expression, fill = condition)) + geom_boxplot(width = 0.5, alpha = 0.7, outlier.shape = NA) + geom_jitter(width = 0.2, size = 1.5, alpha = 0.6) + facet_wrap(~gene, scales = &quot;free_y&quot;) + labs(title = &quot;Expression of Selected Genes&quot;, x = &quot;Condition&quot;, y = &quot;Rlog Expression&quot;) + theme_bw() + theme(legend.position = &quot;none&quot;) ✅ Takeaway: Visualizing individual gene expression helps verify and communicate biological differences. 📌 This approach uses facet_wrap() to display each gene’s distribution across conditions in its own panel, making it easy to compare across genes and conditions. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
