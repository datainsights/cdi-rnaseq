[["index.html", "🧬 RNA-Seq Data Science ", " 🧬 RNA-Seq Data Science Last updated: June 27, 2025 "],["welcome-to-the-rna-seq-qa-guide.html", "🌱 Welcome to the RNA-Seq Q&amp;A Guide", " 🌱 Welcome to the RNA-Seq Q&amp;A Guide This guide is your hands-on companion for learning and applying RNA sequencing (RNA-Seq) data analysis — one question at a time. You’ll explore each step of the RNA-Seq pipeline using real tools, reproducible workflows, and well-commented code. From quality control and quantification to differential expression and biological interpretation, this guide shows how scripting, statistics, and bioinformatics come together in practice. Whether you’re a student, researcher, or self-taught enthusiast, you’ll gain confidence using Python, R, shell scripting, and reproducible workflows — including tools like DESeq2, Salmon, edgeR, FastQC, Snakemake, and more. Each Q&amp;A includes a clear explanation, relevant code in both Python and R when applicable, and builds toward real-world problem solving. You’re not just learning RNA-Seq — you’re learning to think like a modern data-driven bioinformatician. "],["getting-started.html", "Getting Started: Preparing RNA-Seq Data for Analysis Prerequisite Step 1: Run DESeq2 in R Output Files Quick Glimpse: How the Demo Data Was Generated", " Getting Started: Preparing RNA-Seq Data for Analysis Prerequisite Before using this CDI Q&amp;A guide, you need input files that are typically generated from an upstream RNA-Seq pipeline (e.g., using STAR, featureCounts, or HTSeq-count): counts.csv — the raw gene count matrix (genes × samples) metadata.csv — sample information, including experimental condition or batch 🎯 Note: Each user may have their own preferred tools and pipelines to generate these files. That part is considered background work and is not covered in this guide. Once you have these two input files, you’re ready to enter the CDI Q&amp;A learning ecosystem. Step 1: Run DESeq2 in R To generate the analysis-ready files for use in this Q&amp;A guide, run the provided R script using the command line: Rscript scripts/res-df.R 🔧 This script will: Load counts.csv and metadata.csv Run DESeq2 for differential expression analysis Save cleaned outputs to the data/ folder Output Files After running the script, your data/ folder will contain: ✅ demo_counts.csv — the (optionally cleaned) count matrix ✅ demo_metadata.csv — the sample metadata ✅ deseq2_results.csv — DESeq2 differential expression results Quick Glimpse: How the Demo Data Was Generated The RNA-Seq dataset used in this guide was generated using a standard, reproducible pipeline. This overview is provided for transparency—you do not need to reproduce these steps to follow the guide. 🧪 Data type: Paired-end RNA-Seq ✂️ Preprocessing: Adapter trimming performed with Cutadapt 🚀 Alignment: Reads were mapped to the Saccharomyces cerevisiae genome using STAR 🛠 Pipeline orchestration: Implemented using Snakemake from the Workflow Catalog 📊 Quantification: Gene counts were generated by STAR and compiled into a TSV table 📈 Differential Expression: Conducted with DESeq2 using the official Bioconductor guidelines ⚙️ Parallelization: The DESeq2 step was assigned 3 CPU cores ✅ You are now ready to begin the CDI Q&amp;A journey, exploring and visualizing RNA-Seq results using Python, R, and Bash. The next sections will walk you through each question—step by step—with explanations, code, and visuals. "],["how-do-you-explore-total-read-counts-per-sample-before-normalization.html", "Q&A 1 How do you explore total read counts per sample before normalization? 1.1 Explanation 1.2 Python Code 1.3 R Code", " Q&A 1 How do you explore total read counts per sample before normalization? 1.1 Explanation Before performing any normalization or downstream analysis, it’s important to check the total read counts (library sizes) across all samples. This helps identify: ⚠️ Potential outliers or failed libraries 📉 Low-coverage samples that might skew differential expression 📊 Overall distribution differences across conditions By visualizing total counts per sample, we can assess whether further filtering or batch correction might be necessary. 1.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # 🔹 Load data counts = pd.read_csv(&quot;data/demo_counts.csv&quot;, index_col=0) metadata = pd.read_csv(&quot;data/demo_metadata.csv&quot;) # 🔍 Compute total counts per sample total_counts = counts.sum(axis=0).reset_index() total_counts.columns = [&quot;sample_name&quot;, &quot;total_reads&quot;] # 🔗 Merge with metadata plot_data = pd.merge(total_counts, metadata, on=&quot;sample_name&quot;) # 📊 Barplot plt.figure(figsize=(10, 5)) sns.barplot(data=plot_data, x=&quot;sample_name&quot;, y=&quot;total_reads&quot;, hue=&quot;condition&quot;) plt.xticks(rotation=45, ha=&quot;right&quot;) plt.title(&quot;Total Read Counts per Sample&quot;) plt.tight_layout() plt.show() 1.3 R Code library(tidyverse) # 🔹 Load data counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) %&gt;% column_to_rownames(&quot;gene&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🔍 Compute total counts per sample total_reads &lt;- colSums(counts) %&gt;% enframe(name = &quot;sample_name&quot;, value = &quot;total_reads&quot;) # 🔗 Merge with metadata plot_data &lt;- left_join(total_reads, metadata, by = &quot;sample_name&quot;) # 📊 Barplot ggplot(plot_data, aes(x = sample_name, y = total_reads, fill = condition)) + geom_col() + labs(title = &quot;Total Read Counts per Sample&quot;, y = &quot;Total Reads&quot;, x = &quot;Sample&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ✅ Takeaway: Exploring total read counts helps detect inconsistencies early. Investigate samples with unusually low or high counts before trusting downstream results. "],["how-do-you-log-transform-rna-seq-counts-for-pca-or-clustering.html", "Q&A 2 How do you log-transform RNA-Seq counts for PCA or clustering? 2.1 Explanation 2.2 Python Code 2.3 R Code", " Q&A 2 How do you log-transform RNA-Seq counts for PCA or clustering? 2.1 Explanation Raw RNA-Seq counts are highly skewed and heteroscedastic—meaning the variance increases with expression. This makes them unsuitable for clustering, PCA, or heatmap generation because: Counts are not normally distributed High-expression genes dominate signal Variance is not stabilized, which distorts distance-based methods To address this, we apply a log2 transformation, such as: log2(count + 1) – quick and interpretable rlog() or vst() – DESeq2 methods that stabilize variance more robustly These transformations are essential to ensure that visualizations like PCA plots, boxplots, and heatmaps reflect meaningful biological structure rather than artifacts of scale or count depth. 📌 Reminder: Transformation is a core step in RNA-Seq EDA—it unlocks the ability to “see” patterns clearly. 2.2 Python Code import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt # 🔹 Load and log-transform counts = pd.read_csv(&quot;data/demo_counts.csv&quot;, index_col=0) log_counts = np.log2(counts + 1) # 🔍 Preview a few genes log_counts.iloc[:5, :5] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Sample_01 Sample_02 Sample_03 Sample_04 Sample_05 gene SEC24B-AS1 1.584963 3.169925 2.321928 2.807355 2.321928 A1BG 0.000000 1.000000 1.000000 2.584963 0.000000 A1CF 3.807355 5.727920 5.930737 0.000000 5.727920 GGACT 2.807355 0.000000 1.000000 2.584963 2.584963 A2M 10.211888 10.824959 11.830515 11.050529 10.820977 2.3 R Code library(tidyverse) library(DESeq2) # 🔹 Load and log-transform counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) %&gt;% column_to_rownames(&quot;gene&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🧬 Prepare DESeq2 object dds &lt;- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~ condition) # 🔄 Apply regularized log transformation rlog_counts &lt;- rlog(dds) # 🔍 Preview assay(rlog_counts)[1:5, 1:5] Sample_01 Sample_02 Sample_03 Sample_04 Sample_05 SEC24B-AS1 0.7183764 1.3717481 0.4156507 1.02934610 0.8621451 A1BG -1.2882010 -0.8695495 -1.2162496 0.07920678 -1.4217020 A1CF 4.3879484 4.7552744 4.5169602 4.02417352 4.7566223 GGACT 2.4002760 2.0134330 2.0322561 2.21584055 2.2472710 A2M 9.2848548 9.2848548 9.2848548 9.28485478 9.2848548 ✅ Takeaway: Always log-transform count data before applying distance-based methods like PCA or clustering. Use rlog() or vst() for more reliable results on small datasets. "],["how-do-you-perform-pca-to-explore-sample-similarity.html", "Q&A 3 How do you perform PCA to explore sample similarity? 3.1 Explanation 3.2 Python Code 3.3 R Code", " Q&A 3 How do you perform PCA to explore sample similarity? 3.1 Explanation Principal Component Analysis (PCA) is a standard technique to explore global sample differences based on gene expression patterns. In RNA-Seq, PCA is often applied after log-transformation (e.g., log2(count + 1), rlog(), or vst()). It helps identify: 🔍 Clusters of biologically similar samples ⚠️ Potential outliers or mislabeled conditions 📊 The amount of variance explained by key components 3.2 Python Code import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt from sklearn.decomposition import PCA # 🔄 Set seed for reproducibility np.random.seed(42) # 🔹 Load data counts = pd.read_csv(&quot;data/demo_counts.csv&quot;, index_col=0) metadata = pd.read_csv(&quot;data/demo_metadata.csv&quot;) log_counts = np.log2(counts + 1) # 🎯 PCA pca = PCA(n_components=2) pca_result = pca.fit_transform(log_counts.T) pca_df = pd.DataFrame(pca_result, columns=[&quot;PC1&quot;, &quot;PC2&quot;]) pca_df[&quot;sample_name&quot;] = log_counts.columns pca_df = pca_df.merge(metadata, on=&quot;sample_name&quot;) # 📊 Plot plt.figure(figsize=(6, 5)) sns.scatterplot(data=pca_df, x=&quot;PC1&quot;, y=&quot;PC2&quot;, hue=&quot;condition&quot;, s=100) plt.title(&quot;PCA of Log-Transformed Counts&quot;) plt.xlabel(f&quot;PC1 ({pca.explained_variance_ratio_[0]:.1%} variance)&quot;) plt.ylabel(f&quot;PC2 ({pca.explained_variance_ratio_[1]:.1%} variance)&quot;) plt.tight_layout() plt.show() 3.3 R Code library(tidyverse) library(DESeq2) library(ggplot2) # 🔄 Set seed for reproducibility set.seed(42) # 🔹 Load and transform counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) %&gt;% column_to_rownames(&quot;gene&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) dds &lt;- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~ condition) rlog_counts &lt;- rlog(dds) # 🎯 PCA plot pca_data &lt;- plotPCA(rlog_counts, intgroup = &quot;condition&quot;, returnData = TRUE) percentVar &lt;- round(100 * attr(pca_data, &quot;percentVar&quot;)) # 📊 Plot ggplot(pca_data, aes(PC1, PC2, color = condition)) + geom_point(size = 3) + labs(title = &quot;PCA of RNA-Seq Samples&quot;, x = paste0(&quot;PC1 (&quot;, percentVar[1], &quot;%)&quot;), y = paste0(&quot;PC2 (&quot;, percentVar[2], &quot;%)&quot;)) + theme_minimal() # 👁️ Preview top 5x5 matrix assay(rlog_counts)[1:5, 1:5] Sample_01 Sample_02 Sample_03 Sample_04 Sample_05 SEC24B-AS1 0.7183764 1.3717481 0.4156507 1.02934610 0.8621451 A1BG -1.2882010 -0.8695495 -1.2162496 0.07920678 -1.4217020 A1CF 4.3879484 4.7552744 4.5169602 4.02417352 4.7566223 GGACT 2.4002760 2.0134330 2.0322561 2.21584055 2.2472710 A2M 9.2848548 9.2848548 9.2848548 9.28485478 9.2848548 ✅ Takeaway: PCA helps you understand how samples cluster before any statistical testing. Always log-transform your data and set a seed for reproducibility. "],["how-do-you-perform-differential-gene-expression-analysis-using-deseq2.html", "Q&A 4 How do you perform differential gene expression analysis using DESeq2? 4.1 Explanation 4.2 Python Code 4.3 R Code", " Q&A 4 How do you perform differential gene expression analysis using DESeq2? 4.1 Explanation Once the count matrix and sample metadata are properly loaded and matched, we use DESeq2 to identify genes that are significantly differentially expressed between experimental conditions. DESeq2 performs a robust multi-step process: 📊 Estimates size factors to normalize for library depth 🔁 Calculates dispersion for each gene to model biological variability ⚙️ Fits a negative binomial generalized linear model (GLM) to the counts 🧪 Tests for significance using the Wald test (or LRT if specified) 📉 Adjusts p-values using False Discovery Rate (FDR) correction The result is a table of genes with corresponding log2 fold changes, p-values, and adjusted p-values—ready for interpretation and visualization. 4.2 Python Code # NOTE: DESeq2 is R-based; in Python, use rpy2 or export counts and run DE in R # Placeholder: Python can handle visualization of DE results after exporting from R 4.3 R Code The code below is store in scripts/res-df.R library(tidyverse) library(DESeq2) # 🔄 Set seed for reproducibility set.seed(42) # 🔹 Load data counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) %&gt;% column_to_rownames(&quot;gene&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) # 🧬 Create DESeq2 object dds &lt;- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~ condition) # ⚙️ Run DE analysis dds &lt;- DESeq(dds) # 📋 Extract results res &lt;- results(dds) # 🧼 Clean results res_df &lt;- as.data.frame(res) %&gt;% rownames_to_column(&quot;gene&quot;) %&gt;% arrange(padj) # 💾 Save for downstream visualization if not already saved if (!file.exists(&quot;data/deseq2_results.csv&quot;)) { write_csv(res_df, &quot;data/deseq2_results.csv&quot;) } # 👁️ Preview top results head(res_df, 5) gene baseMean log2FoldChange lfcSE stat pvalue padj 1 A1BG 1.116303 -2.9257945 1.810125 -1.6163498 0.1060187 0.6361123 2 SEC24B-AS1 5.020260 -0.8370475 1.221274 -0.6853887 0.4930987 0.9861974 3 A2ML1 2.376188 -2.0927894 2.344610 -0.8925959 0.3720736 0.9861974 4 A1CF 60.556927 0.1956390 1.364227 0.1434065 0.8859692 0.9999971 5 GGACT 18.275000 -0.1999325 1.724350 -0.1159465 0.9076949 0.9999971 ✅ Takeaway: DESeq2 provides robust statistical testing for identifying differentially expressed genes. Always inspect and sort results by adjusted p-value (padj) to focus on the most significant findings. "],["how-do-you-visualize-differentially-expressed-genes-with-a-volcano-plot.html", "Q&A 5 How do you visualize differentially expressed genes with a volcano plot? 5.1 Explanation 5.2 Python Code 5.3 R Code", " Q&A 5 How do you visualize differentially expressed genes with a volcano plot? 5.1 Explanation A volcano plot combines both statistical significance and effect size in one visual: X-axis: log2 fold change (magnitude of expression difference) Y-axis: -log10 adjusted p-value (significance) Helps highlight genes that are both statistically significant and strongly regulated Typically uses color to distinguish significant genes for quick interpretation 5.2 Python Code ℹ️ Make sure the file data/deseq2_results.csv has already been saved by the (above) R code from the DESeq2 step. import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt # 🔹 Load DE results (exported from R) res_df = pd.read_csv(&quot;data/deseq2_results.csv&quot;) # 🧪 Add significance status res_df[&quot;significant&quot;] = (res_df[&quot;padj&quot;] &lt; 0.05) &amp; (abs(res_df[&quot;log2FoldChange&quot;]) &gt; 1) # 📊 Volcano plot plt.figure(figsize=(8, 6)) sns.scatterplot(data=res_df, x=&quot;log2FoldChange&quot;, y=-np.log10(res_df[&quot;padj&quot;]), hue=&quot;significant&quot;, palette={True: &quot;red&quot;, False: &quot;gray&quot;}, alpha=0.7) plt.axhline(-np.log10(0.05), linestyle=&quot;--&quot;, color=&quot;black&quot;, linewidth=1) plt.axvline(x=-1, linestyle=&quot;--&quot;, color=&quot;black&quot;, linewidth=1) plt.axvline(x=1, linestyle=&quot;--&quot;, color=&quot;black&quot;, linewidth=1) plt.title(&quot;Volcano Plot of Differential Expression&quot;) plt.xlabel(&quot;Log2 Fold Change&quot;) plt.ylabel(&quot;-Log10 Adjusted P-Value&quot;) plt.legend(title=&quot;Significant&quot;) plt.tight_layout() plt.show() 5.3 R Code library(tidyverse) # 🔹 Load saved DESeq2 results from CSV res_df &lt;- read_csv(&quot;data/deseq2_results.csv&quot;) %&gt;% drop_na(log2FoldChange, padj) %&gt;% mutate(significant = padj &lt; 0.05 &amp; abs(log2FoldChange) &gt; 1) # 📊 Volcano plot ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significant)) + geom_point(alpha = 0.6, size = 2) + scale_color_manual(values = c(&quot;FALSE&quot; = &quot;gray&quot;, &quot;TRUE&quot; = &quot;red&quot;)) + geom_vline(xintercept = c(-1, 1), linetype = &quot;dashed&quot;) + geom_hline(yintercept = -log10(0.05), linetype = &quot;dashed&quot;) + labs(title = &quot;Volcano Plot of Differential Expression&quot;, x = &quot;Log2 Fold Change&quot;, y = &quot;-Log10 Adjusted P-Value&quot;) + theme_minimal() Takeaway: ✅ Volcano plots help visualize genes with both strong effect size and statistical significance, making it easier to prioritize candidates for downstream analysis or validation. Use clear thresholds (e.g., log2FC &gt; 1, padj &lt; 0.05) to highlight key hits "],["how-do-you-visualize-the-expression-of-a-single-gene-with-a-boxplot.html", "Q&A 6 How do you visualize the expression of a single gene with a boxplot? 6.1 Explanation 6.2 Python Code 6.3 R Code", " Q&A 6 How do you visualize the expression of a single gene with a boxplot? 6.1 Explanation Once differential expression is complete, it’s common to visualize individual genes of interest. A boxplot shows how expression levels vary across conditions. To make this plot: - Use log-transformed counts (e.g., from rlog() or log2(count + 1)) - Select one gene of interest from the DE results - Combine expression values with sample metadata 6.2 Python Code import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt # 🔹 Load and prepare data log_counts = np.log2(pd.read_csv(&quot;data/demo_counts.csv&quot;, index_col=0) + 1) metadata = pd.read_csv(&quot;data/demo_metadata.csv&quot;) gene_to_plot = &quot;A2M&quot; # 🔍 Check if gene exists if gene_to_plot not in log_counts.index: raise ValueError(f&quot;{gene_to_plot} not found in count matrix.&quot;) # 🧬 Prepare long-form dataframe df_plot = pd.DataFrame({ &quot;expression&quot;: log_counts.loc[gene_to_plot], &quot;sample_name&quot;: log_counts.columns }).merge(metadata, on=&quot;sample_name&quot;) # 📦 Boxplot plt.figure(figsize=(5, 4)) sns.boxplot(data=df_plot, x=&quot;condition&quot;, y=&quot;expression&quot;, palette=&quot;Set2&quot;) sns.stripplot(data=df_plot, x=&quot;condition&quot;, y=&quot;expression&quot;, color=&quot;black&quot;, alpha=0.6) plt.title(f&quot;Expression of {gene_to_plot}&quot;) plt.ylabel(&quot;Log2 Expression&quot;) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_41833/1503619118.py:23: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect. sns.boxplot(data=df_plot, x=&quot;condition&quot;, y=&quot;expression&quot;, palette=&quot;Set2&quot;) 6.3 R Code library(tidyverse) library(DESeq2) # 🔄 Set seed for reproducibility set.seed(42) # 🔹 Load and transform counts &lt;- read_csv(&quot;data/demo_counts.csv&quot;) %&gt;% column_to_rownames(&quot;gene&quot;) metadata &lt;- read_csv(&quot;data/demo_metadata.csv&quot;) dds &lt;- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~ condition) rlog_counts &lt;- rlog(dds) # 🔍 Gene to plot gene_to_plot &lt;- &quot;A2M&quot; if (!gene_to_plot %in% rownames(rlog_counts)) stop(&quot;Gene not found.&quot;) # 📦 Prepare dataframe plot_data &lt;- data.frame( expression = assay(rlog_counts)[gene_to_plot, ], sample_name = colnames(rlog_counts) ) %&gt;% left_join(metadata, by = &quot;sample_name&quot;) # 📊 Boxplot ggplot(plot_data, aes(x = condition, y = expression)) + geom_boxplot(fill = &quot;skyblue&quot;, alpha = 0.6) + geom_jitter(width = 0.1) + labs(title = paste(&quot;Expression of&quot;, gene_to_plot), y = &quot;Log2 Expression&quot;) + theme_minimal() ✅ Takeaway: Use boxplots to clearly visualize how expression of a specific gene differs between conditions. Combine with DE results to validate biological interpretation. "],["how-do-you-summarize-expression-changes-with-an-ma-plot.html", "Q&A 7 How do you summarize expression changes with an MA plot? 7.1 Explanation 7.2 Python Code 7.3 R Code", " Q&A 7 How do you summarize expression changes with an MA plot? 7.1 Explanation An MA plot (short for Minus vs. Average plot) displays the relationship between: M (log ratio) = log2 fold change (Y-axis), showing the difference in expression between conditions A (mean average) = average expression across all samples (X-axis), typically on a log scale This visualization helps identify: ✳️ Genes with large fold changes ⚠️ Low-abundance genes with unstable variance 🔍 Systematic biases or asymmetries in the DE results It’s especially useful after running DESeq2, as the result object already contains both baseMean (A) and log2FoldChange (M). 7.2 Python Code ℹ️ Make sure data/deseq2_results.csv is available, saved from the R step. import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt # 🔹 Load DE results res_df = pd.read_csv(&quot;data/deseq2_results.csv&quot;) # 🧪 Add significance flag res_df[&quot;significant&quot;] = (res_df[&quot;padj&quot;] &lt; 0.05) &amp; (abs(res_df[&quot;log2FoldChange&quot;]) &gt; 1) # 📊 MA plot plt.figure(figsize=(8, 6)) sns.scatterplot(data=res_df, x=np.log10(res_df[&quot;baseMean&quot;] + 1), y=res_df[&quot;log2FoldChange&quot;], hue=&quot;significant&quot;, palette={True: &quot;red&quot;, False: &quot;gray&quot;}, alpha=0.6) plt.axhline(0, linestyle=&quot;--&quot;, color=&quot;black&quot;) plt.title(&quot;MA Plot of Differential Expression&quot;) plt.xlabel(&quot;Log10 Mean Expression (baseMean)&quot;) plt.ylabel(&quot;Log2 Fold Change&quot;) plt.legend(title=&quot;Significant&quot;) plt.tight_layout() plt.show() 7.3 R Code library(tidyverse) # 🔹 Load DE results saved during initial processing res_df &lt;- read_csv(&quot;data/deseq2_results.csv&quot;) %&gt;% drop_na(log2FoldChange, padj) %&gt;% mutate(significant = padj &lt; 0.05 &amp; abs(log2FoldChange) &gt; 1) # 📊 Volcano plot ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significant)) + geom_point(alpha = 0.6, size = 2) + scale_color_manual(values = c(&quot;FALSE&quot; = &quot;gray&quot;, &quot;TRUE&quot; = &quot;red&quot;)) + geom_vline(xintercept = c(-1, 1), linetype = &quot;dashed&quot;) + geom_hline(yintercept = -log10(0.05), linetype = &quot;dashed&quot;) + labs(title = &quot;Volcano Plot of Differential Expression&quot;, x = &quot;Log2 Fold Change&quot;, y = &quot;-Log10 Adjusted P-Value&quot;) + theme_minimal() ✅ Takeaway: MA plots reveal expression trends across the full dynamic range of genes. Use them to verify if your DE analysis is symmetric and highlight low-abundance noise. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
